{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react\\\\src\\\\pages\\\\views\\\\Admin\\\\EditPost\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { storage } from '../../../../firebase';\nimport postApi from '../../../../api/postApi';\n\nconst EditPost = ({\n  types,\n  onUpdate\n}) => {\n  let {\n    id\n  } = useParams();\n  let history = useHistory();\n  const {\n    handleSubmit,\n    register,\n    errors\n  } = useForm();\n  const [post, setPost] = useState({});\n  const [valueEditor, setValueEditor] = useState('');\n  const [valueImage, setValueImage] = useState('');\n  const [valueDate, setValueDate] = useState('');\n\n  const loadPost = async () => {\n    const {\n      data\n    } = await postApi.get(id);\n    setPost(data);\n  };\n\n  useEffect(() => {\n    loadPost();\n    let today = new Date();\n    let date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\n    setValueDate(date);\n  }, []);\n\n  const onHandleChange = e => {\n    setPost({ ...post,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onHandleImageChange = e => {\n    if (e.target.files[0]) {\n      setValueImage(e.target.files[0]);\n    }\n  };\n\n  const onHandleEditorChange = (event, editor) => {\n    const data = editor.getData();\n    setValueEditor(data);\n  };\n\n  const onHandleSubmit = data => {\n    if (valueImage.name != null) {\n      const uploadTask = storage.ref(`images/${valueImage.name}`).put(valueImage);\n      uploadTask.on(\"state_changed\", snapshot => {}, error => {\n        console.log(error);\n      }, () => {\n        storage.ref(\"images\").child(valueImage.name).getDownloadURL().then(url => {\n          const newData = Object.assign(data, {\n            'image': url\n          }, {\n            'content': valueEditor\n          }, {\n            'date': valueDate\n          });\n          onUpdate(id, newData);\n          history.push(\"/admin/posts\");\n        });\n      });\n    } else {\n      const newData = Object.assign(data, {\n        'image': post.image\n      }, {\n        'content': valueEditor\n      });\n      onUpdate(id, newData);\n      history.push(\"/admin/posts\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    class: \"h3 mb-0 text-gray-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Edit Post\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onHandleSubmit),\n    className: \"w-50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control\",\n    name: \"type_id\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, types.map(({\n    id,\n    name\n  }) => /*#__PURE__*/React.createElement(\"option\", {\n    value: id,\n    selected: id == post.type_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }, name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"name\",\n    value: post.name,\n    onChange: onHandleChange,\n    ref: register({\n      required: true,\n      minLength: 3,\n      maxLength: 50,\n      pattern: {\n        value: /^\\S/\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"nameHelp\",\n    className: \"form-text text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, errors.name && errors.name.type === \"required\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 76\n    }\n  }, \"This field is required\"), errors.name && errors.name.type === \"minLength\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 77\n    }\n  }, \"Min Length 3\"), errors.name && errors.name.type === \"maxLength\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 77\n    }\n  }, \"Max Length 50\"), errors.name && errors.name.type === \"pattern\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 75\n    }\n  }, \"Invalid space\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, \"Image\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: post.image,\n    width: \"120px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"custom-file-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, \"Choose file...\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    className: \"custom-file-input\",\n    name: \"image\",\n    onChange: onHandleImageChange,\n    ref: register({\n      pattern: {\n        value: /\\.(gif|jpg|jpeg|tiff|png|webp|bmp)$/i\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"imageHelp\",\n    className: \"form-text text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, errors.image && errors.image.type === \"pattern\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 81\n    }\n  }, \"Invalid image\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"description\",\n    value: post.description,\n    onChange: onHandleChange,\n    ref: register({\n      required: true,\n      minLength: 6,\n      maxLength: 100,\n      pattern: {\n        value: /^\\S/\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"descriptionHelp\",\n    className: \"form-text text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, errors.description && errors.description.type === \"required\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 90\n    }\n  }, \"This field is required\"), errors.description && errors.description.type === \"minLength\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 91\n    }\n  }, \"Min Length 6\"), errors.description && errors.description.type === \"maxLength\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 91\n    }\n  }, \"Max Length 100\"), errors.description && errors.description.type === \"pattern\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 89\n    }\n  }, \"Invalid space\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(CKEditor, {\n    editor: ClassicEditor,\n    data: post.content,\n    onInit: editor => {},\n    onChange: onHandleEditorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nEditPost.propTypes = {\n  products: PropTypes.array\n};\nexport default EditPost;","map":{"version":3,"sources":["C:/xampp/htdocs/react/src/pages/views/Admin/EditPost/index.js"],"names":["React","useState","useEffect","PropTypes","useParams","useHistory","useForm","CKEditor","ClassicEditor","storage","postApi","EditPost","types","onUpdate","id","history","handleSubmit","register","errors","post","setPost","valueEditor","setValueEditor","valueImage","setValueImage","valueDate","setValueDate","loadPost","data","get","today","Date","date","getDate","getMonth","getFullYear","onHandleChange","e","target","name","value","onHandleImageChange","files","onHandleEditorChange","event","editor","getData","onHandleSubmit","uploadTask","ref","put","on","snapshot","error","console","log","child","getDownloadURL","then","url","newData","Object","assign","push","image","required","map","type_id","minLength","maxLength","pattern","type","description","content","propTypes","products","array"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport CKEditor from '@ckeditor/ckeditor5-react'\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic'\r\nimport {storage} from '../../../../firebase'\r\nimport postApi from '../../../../api/postApi'\r\n\r\nconst EditPost = ({types, onUpdate}) => {\r\n    let { id } = useParams();\r\n    let history = useHistory();\r\n    const {handleSubmit, register, errors} = useForm();\r\n\r\n    const [post, setPost] = useState({});\r\n    const [valueEditor, setValueEditor] = useState('');\r\n    const [valueImage, setValueImage] = useState('');\r\n    const [valueDate, setValueDate] = useState('');\r\n\r\n    const loadPost = async () => {\r\n        const {data} = await postApi.get(id);\r\n        setPost(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadPost();\r\n        let today = new Date();\r\n        let date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\r\n        setValueDate(date);\r\n    }, []);\r\n\r\n    const onHandleChange = e => {\r\n        setPost({...post, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const onHandleImageChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setValueImage(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onHandleEditorChange = (event, editor) => {\r\n        const data = editor.getData();\r\n        setValueEditor(data);\r\n    }\r\n\r\n    const onHandleSubmit = (data) => {\r\n        if (valueImage.name != null) {\r\n            const uploadTask = storage.ref(`images/${valueImage.name}`).put(valueImage);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => {},\r\n                error => {console.log(error)},\r\n                () => {storage\r\n                    .ref(\"images\")\r\n                    .child(valueImage.name)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        const newData = Object.assign(data, {'image': url}, {'content': valueEditor}, {'date': valueDate});\r\n                        onUpdate(id, newData);\r\n                        history.push(\"/admin/posts\");\r\n                    });\r\n                }\r\n            ) \r\n        } else {\r\n            const newData = Object.assign(data, {'image': post.image}, {'content': valueEditor});\r\n            onUpdate(id, newData);\r\n            history.push(\"/admin/posts\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 class=\"h3 mb-0 text-gray-800\">Edit Post</h1>\r\n            <form onSubmit={handleSubmit(onHandleSubmit)} className=\"w-50\">\r\n                <div className=\"form-group\">\r\n                    <label>Type</label>\r\n                    <select className=\"form-control\" name=\"type_id\" ref={register({required: true})}>\r\n                        {types.map(({ id, name }) => (\r\n                            <option value={id} selected={id == post.type_id}>{name}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        name=\"name\" \r\n                        value={post.name}\r\n                        onChange={onHandleChange}\r\n                        ref={register({\r\n                            required: true,\r\n                            minLength: 3,\r\n                            maxLength: 50,\r\n                            pattern: {\r\n                                value: /^\\S/\r\n                            }\r\n                        })}\r\n                    />\r\n                    <small id=\"nameHelp\" className=\"form-text text-danger\">\r\n                        {errors.name && errors.name.type === \"required\" && <span>This field is required</span>}\r\n                        {errors.name && errors.name.type === \"minLength\" && <span>Min Length 3</span>}\r\n                        {errors.name && errors.name.type === \"maxLength\" && <span>Max Length 50</span>}\r\n                        {errors.name && errors.name.type === \"pattern\" && <span>Invalid space</span>}\r\n                    </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Image</label>\r\n                    <img src={post.image} width=\"120px\" />\r\n                    <div className=\"custom-file\">\r\n                        <label className=\"custom-file-label\">Choose file...</label>\r\n                        <input \r\n                            type=\"file\" \r\n                            className=\"custom-file-input\" \r\n                            name=\"image\" \r\n                            onChange={onHandleImageChange}\r\n                            ref={register({\r\n                                pattern: {\r\n                                    value: /\\.(gif|jpg|jpeg|tiff|png|webp|bmp)$/i\r\n                                }\r\n                            })}\r\n                        />\r\n                        <small id=\"imageHelp\" className=\"form-text text-danger\">\r\n                            {errors.image && errors.image.type === \"pattern\" && <span>Invalid image</span>}\r\n                        </small>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Description</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        name=\"description\" \r\n                        value={post.description}\r\n                        onChange={onHandleChange}\r\n                        ref={register({\r\n                            required: true,\r\n                            minLength: 6,\r\n                            maxLength: 100,\r\n                            pattern: {\r\n                                value: /^\\S/\r\n                            }\r\n                        })}\r\n                    />\r\n                    <small id=\"descriptionHelp\" className=\"form-text text-danger\">\r\n                        {errors.description && errors.description.type === \"required\" && <span>This field is required</span>}\r\n                        {errors.description && errors.description.type === \"minLength\" && <span>Min Length 6</span>}\r\n                        {errors.description && errors.description.type === \"maxLength\" && <span>Max Length 100</span>}\r\n                        {errors.description && errors.description.type === \"pattern\" && <span>Invalid space</span>}\r\n                    </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Content</label>\r\n                    <CKEditor\r\n                        editor={ ClassicEditor }\r\n                        data={post.content}\r\n                        onInit={ editor => {} }\r\n                        onChange={onHandleEditorChange}\r\n                    />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nEditPost.propTypes = {\r\n    products: PropTypes.array\r\n}\r\n\r\nexport default EditPost\r\n"]},"metadata":{},"sourceType":"module"}